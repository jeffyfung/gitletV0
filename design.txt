file system
.
|-- working dir
|    |-- file #1
|    |-- file #2 		<- being tracked
|
|-- .gitlet 		<- created by init
     |-- staging area
     |  |-- staged file #1
     |  |-- staged file #2...
     |-- branches
     |  |-- map<branch name, branch end commit hash str> ("treemap")
     |  |-- map<current branch, branch name> ???			<- indicate HEAD pointer
     |-- commits
     |  |-- cacher: map<obj variable, commit / blob objs>		<- not serialized
     |  |-- serialized commit obj #1
     |  |	- attr: commit_msg
     |  |	- map<file name, blob hash str> ("treemap")
     |  |	- list<parent commit hash str> (len=2 for merge commit)
     |  |-- serialized commit obj #2 ...
     |-- blobs
        |-- map<blob hash str, file objs>				<- not serialized
        |-- serialized file obj 1 (titled blob hash #1)			<- derserialized only when needed; one at a time
        |-- serialized file obj 2 (titled blob hash #2)


data structure
|--commit tree
    |--tree(node, List<Tree>) ???		<-immutable


func
- lazy loading_commit: commit hash str -> runtime commit obj
- lazy loading_blob: blob hash str -> runtime commit obj
- write back

notes on command:
- merge
    - there is no commit included in the command
    - it adds / revise blobs in working dir and stage the amendments at best

construct commit object -> hash commit object -> serialize and store hash string
sha1: byte array / string -> string (unique)
writeObject: -> file in dir

commit object --serialize--> 		byte arrays
	--sha1--> 			get hash of obj byte arrays
	--writeContent--> 		file in dir (named: hash string)
	-->				update GitletRepo.headMap
	-->				update 